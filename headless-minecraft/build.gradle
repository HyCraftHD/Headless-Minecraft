plugins {
   id "java-library" 
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
}

repositories {
	mavenCentral()
	maven {
		url "https://files.minecraftforge.net/maven"
	}
}

dependencies {
	compileOnly project(":Mapped-Minecraft")
	implementation project(":Headless-Minecraft-Common")
				
	implementation group: "cpw.mods", name: "modlauncher", version: config.mod_launcher.version
	implementation group: "org.spongepowered", name: "mixin", version: config.mixin.version
	implementation group: "org.ow2.asm", name: "asm", version: config.asm.version
	implementation group: "org.ow2.asm", name: "asm-commons", version: config.asm.version
	implementation group: "org.ow2.asm", name: "asm-tree", version: config.asm.version
	implementation group: "org.ow2.asm", name: "asm-analysis", version: config.asm.version
	implementation group: "org.ow2.asm", name: "asm-util", version: config.asm.version
	
	annotationProcessor group: "org.spongepowered", name: "mixin", version: config.mixin.version, classifier: "processor"
	annotationProcessor group: "org.ow2.asm", name: "asm", version: config.asm.version
	annotationProcessor group: "org.ow2.asm", name: "asm-commons", version: config.asm.version
	annotationProcessor group: "org.ow2.asm", name: "asm-tree", version: config.asm.version
	annotationProcessor group: "org.ow2.asm", name: "asm-analysis", version: config.asm.version
	annotationProcessor group: "org.ow2.asm", name: "asm-util", version: config.asm.version
}

archivesBaseName = "headless_minecraft_implementation-" + minecraft_version
version = rootProject.version

jar {
	archiveClassifier = ""
	
	manifest {
		attributes(
			"Implementation-Version": version,
	        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
	        "MixinConfigs": "mixin.json"
        )
	}
}

def mixin_ap = file("${buildDir}/mixin_ap")
def reobf = file("${buildDir}/reobf")

def mixin_tsrg = file("${mixin_ap}/out.tsrg")
def mixin_refmap = file("${mixin_ap}/refmap.json")

def reobf_jar = file("${reobf}/output.jar")

mixin_ap.mkdirs()
reobf.mkdirs()

tasks.withType(JavaCompile) {
	options.compilerArgs += "-AdefaultObfuscationEnv=searge"
    options.compilerArgs += "-AmappingTypes=tsrg"
    options.compilerArgs += "-AreobfTsrgFile=${mapping_name_to_obf}"
    options.compilerArgs += "-AoutTsrgFile=${mixin_tsrg}"
    options.compilerArgs += "-AoutRefMapFile=${mixin_refmap}"
}

task putRefmapToJar(dependsOn: compileJava) {
	jar.dependsOn putRefmapToJar
	
	doLast {
		jar.from(mixin_refmap)
	}	
}

task reobfJar(type: JavaExec, dependsOn: jar) {
	classpath rootProject.buildscript.configurations.classpath
	main "net.md_5.specialsource.SpecialSource"
	args "--in-jar", jar.archivePath , "--out-jar", reobf_jar, "--srg-in", mapping_name_to_obf, "--srg-in", mixin_tsrg, "--live"
	
	workingDir reobf
}

import java.nio.file.Files
import java.nio.file.StandardCopyOption

task replaceWithReobfJar(dependsOn: reobfJar) {
	assemble.dependsOn replaceWithReobfJar
	
	doLast {
		Files.copy(reobf_jar.toPath(), jar.archivePath.toPath(), StandardCopyOption.REPLACE_EXISTING)
	}
}