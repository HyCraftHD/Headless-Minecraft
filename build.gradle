buildscript {

	ext.buildProps = file "build.properties"

	buildProps.withReader {
		def prop = new Properties()
		prop.load(it)
		ext.config = new ConfigSlurper().parse prop
	}

    repositories {
	    mavenCentral()
	    maven {
	    	url "https://files.minecraftforge.net/maven"
	    }
		maven {
			url "https://repo.u-team.info"
    	}
	}

    dependencies {
		classpath "net.hycrafthd:minecraft_downloader:${config.minecraft_downloader.version}"
        classpath "net.minecraftforge:srgutils:${config.srgutils.version}"
        classpath "net.md-5:SpecialSource:${config.special_source.version}"
    }
}

plugins {
    id "java-library"
    id "eclipse"
    id "com.palantir.launch-config" version "1.2.0"
}

ext {
	minecraft_version = config.minecraft.version
	
	// Directories
	minecraft_files = file "$buildDir/minecraft_files"
	mappings = file "$buildDir/mappings"
	mapped = file "$buildDir/mapped"
	
	// Files
	official_mappings_file = file "$minecraft_files/$minecraft_version-client.txt"
	obf_to_mapping = file "$mappings/obf_to_mapping.srg"
	mapping_to_obf = file "$mappings/mapping_to_obf.srg"
	minecraftJar = file "$minecraft_files/$minecraft_version-client.jar"
	mappedMinecraftJar = file "$mapped/mapped-minecraft.jar"
	libraryList = file "$minecraft_files/libraries.txt"
}

repositories {
	mavenCentral()
	maven {
		url "https://files.minecraftforge.net/maven"
	}
	maven {
		url "https://repo.u-team.info"
	}
}

configurations {
	headlessMinecraftImplementation
	
	packedDependencies {
		transitive = false
	}
	
	asm {
		transitive = false
	}
	
	packedDependencies.extendsFrom asm
	implementation.extendsFrom packedDependencies
}

dependencies {
	headlessMinecraftImplementation project(":Headless-Minecraft-Implementation")
	
	packedDependencies "net.hycrafthd:minecraft_downloader:${config.minecraft_downloader.version}"
	packedDependencies "net.hycrafthd:logging_util:${config.logging_util.version}"
	
	packedDependencies "org.apache.logging.log4j:log4j-api:${config.log4j.version}"
	packedDependencies "org.apache.logging.log4j:log4j-core:${config.log4j.version}"
	packedDependencies "org.apache.logging.log4j:log4j-iostreams:${config.log4j.version}"
	
	packedDependencies "net.sf.jopt-simple:jopt-simple:${config.jopt_simple.version}"
	
	packedDependencies "org.spongepowered:mixin:${config.mixin.version}"
	
	packedDependencies "cpw.mods:modlauncher:${config.mod_launcher.version}"
	packedDependencies "cpw.mods:grossjava9hacks:${config.gross_java9_hacks.version}"
	
    packedDependencies "com.google.guava:guava:${config.guava.version}"
    packedDependencies "com.google.code.gson:gson:${config.gson.version}"
    
    asm "org.ow2.asm:asm:${config.asm.version}"
    asm "org.ow2.asm:asm-commons:${config.asm.version}"
    asm "org.ow2.asm:asm-tree:${config.asm.version}"
	asm "org.ow2.asm:asm-analysis:${config.asm.version}"
	asm "org.ow2.asm:asm-util:${config.asm.version}"
}

configurations.packedDependencies.each { println it }

group = "net.hycrafthd"
archivesBaseName = "headless_minecraft-" + minecraft_version
version = "1.0.0-SNAPSHOT"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
	withSourcesJar()
	withJavadocJar()
}

tasks.named("jar") {
	archiveClassifier = ""
	
	from "LICENSE"
		
	manifest {
		attributes(
			"Implementation-Version": project.version,
			"Implementation-Vendor": "HyCraftHD, Luc_ZZ",
	        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
	}
}

task runHeadlessMinecraft(type: JavaExec) {
	def run = new File("$rootDir/run")
	if(!run.exists() ) {
		run.mkdirs()
	}

	main "net.hycrafthd.headless_minecraft.launcher.Main"
	args "--run", "\"$run\"", "--username", "xyz", "--password", "xyz"
	systemProperties = [
		"headless-minecraft.development": "true",
		"headless-minecraft.development.download": "\"$minecraft_files\"",
		"headless-minecraft.development.mapped-minecraft": "\"$mappedMinecraftJar\"",
		"headless-minecraft.development.implementation-build": "\"" + file(project(":Headless-Minecraft-Implementation").projectDir.toString() + "/bin/main") +"\"",
	]
	workingDir run
}