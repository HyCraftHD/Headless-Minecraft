buildscript {
    repositories {
	    mavenCentral()
	    maven {
	    	url "https://files.minecraftforge.net/maven"
	    }
	}

    dependencies {
        classpath "net.minecraftforge:srgutils:0.4.1"
        classpath "net.md-5:SpecialSource:1.9.0"
    }
}

plugins {
    id "java-library"
    id "eclipse"
    id "com.palantir.launch-config" version "1.2.0"
}

repositories {
    mavenCentral()
    maven {
    	url "https://repo.u-team.info"
    }
}

dependencies {
	implementation "net.hycrafthd:minecraft_downloader:1.0.0-SNAPSHOT"
}

def minecraft_version = "1.16.5"
group = "net.hycrafthd"
archivesBaseName = "headless_minecraft-" + minecraft_version
version = "1.0.0-SNAPSHOT"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
	withSourcesJar()
	withJavadocJar()
}

tasks.named("jar") {
	archiveClassifier = ""
	
	from "LICENSE"
		
	manifest {
		attributes(
			"Implementation-Version": project.version,
			"Implementation-Vendor": "HyCraftHD, Luc_ZZ",
	        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
	}
}

// Setup project

// Imports
import net.minecraftforge.srgutils.IMappingFile
import net.minecraftforge.srgutils.IMappingFile.Format

// Directories
def minecraft = file("$buildDir/minecraft")
def minecraft_downloader = file("$buildDir/minecraft-downloader")
def mappings = file("$buildDir/mappings")

// Files
def official_mappings_file = project.file("${minecraft}/${minecraft_version}-client.txt")
def obf_to_mapping = project.file("${mappings}/obf_to_mapping.srg")
def mapping_to_obf = project.file("${mappings}/mapping_to_obf.srg")

// Create directories
task createDirectories() {
	minecraft.mkdirs()
	minecraft_downloader.mkdirs()
	mappings.mkdirs()
}

// Download minecraft
task downloadMinecraft(type: JavaExec, dependsOn: createDirectories) {
	classpath sourceSets.main.runtimeClasspath
	main "net.hycrafthd.minecraft_downloader.Main"
	args "--version", minecraft_version, "--output", minecraft, "--skipAssets"

	workingDir minecraft_downloader
}

// Generate tsrg files from official mappings
task generateTsrgFiles(dependsOn: downloadMinecraft) {
	doLast {
		IMappingFile file = IMappingFile.load(official_mappings_file)
		
		file.write(obf_to_mapping.toPath(), Format.TSRG, true)
		file.write(mapping_to_obf.toPath(), Format.TSRG, false)
	}
}