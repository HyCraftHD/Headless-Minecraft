buildscript {
	repositories {
		maven {
			url = "https://maven.minecraftforge.net"
		}
		maven {
			url = "https://maven.parchmentmc.org"
		}
		mavenCentral()
	}
	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
		classpath group: "org.parchmentmc", name: "librarian", version: "1.+", changing: true
	}
}

subprojects {
	apply plugin: "eclipse"
	apply plugin: "java"
	
	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(17)
		}
	}
}

ext {
	MAPPING_CHANNEL = "parchment"
	MAPPING_VERSION = "2022.01.23-1.18.1"
	MC_VERSION = "1.18.1"
	MCP_VERSION = "20211210.034407"
	
	SPI = "net.minecraftforge:forgespi:4.0.11"
	FART = "net.minecraftforge:ForgeAutoRenamingTool:0.1.21:all"
}

println(" Java: " + System.getProperty("java.version") +
		" JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ")" +
		" Arch: " + System.getProperty("os.arch"))


project(":mcp") {
	apply plugin: "net.minecraftforge.gradle.mcp"
	
	mcp {
		config MC_VERSION + "-" + MCP_VERSION
		pipeline = "joined"
	}
}

project(":clean") {
	evaluationDependsOn(":mcp")
	
	apply plugin: "net.minecraftforge.gradle.patcher"
	apply plugin: "org.parchmentmc.librarian.forgegradle"
	
	dependencies {
		implementation SPI
	}
	
	patcher {
		parent = project(":mcp")
		mcVersion = MC_VERSION
		patchedSrc = file("src/main/java")
		
		mappings channel: MAPPING_CHANNEL, version: MAPPING_VERSION
		
		runs.clear()
	}
}

project(":minecraft") {
	evaluationDependsOn(":clean")
	
	apply plugin: "net.minecraftforge.gradle.patcher"
	apply plugin: "org.parchmentmc.librarian.forgegradle"
	
	group = "net.hycrafthd"
	archivesBaseName = "headless-minecraft"
	version = MC_VERSION + "-0.0.1"
	
	sourceSets {
		main {
			java {
				srcDirs = [
					"$rootDir/src/main/java",
				]
			}
			resources {
				srcDirs = [
					"$rootDir/src/main/resources",
				]
			}
		}
	}
	
	dependencies {
		implementation SPI
	}
	
	patcher {
		parent = project(":clean")
		patches = file("$rootDir/patches")
		patchedSrc = file("src/main/java")
		accessTransformers.from file("$rootDir/src/main/resources/accesstransformer.at")
		srgPatches = true
		
		runs.clear()
		
		runs {
			headless_minecraft {
				client true
				taskName "runHeadless-Minecraft"
				ideaModule "${rootProject.name}.${project.name}.main"
				
				main "net.hycrafthd.headless_minecraft.Main"
				workingDirectory rootProject.file("run")
				
				args "--gameDir", "."
				args "--version", MC_VERSION
				args "--assetsDir", downloadAssets.output
				args "--assetIndex", "{asset_index}"
				args "--accessToken", "0"
			}
		}
	}
	
	genPatches {
		autoHeader true
		lineEnding = "\n"
	}
	
	reobfJar {
		tool = FART
		args = [
			"--input",
			"{input}",
			"--output",
			"{output}",
			"--map",
			"{srg}"
		]
	}
}

task setup {
	group = "setup"
	description = "Setup dev workspace"
	
	dependsOn ":clean:extractMapped"
	dependsOn ":minecraft:extractMapped"
}