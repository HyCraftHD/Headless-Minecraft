buildscript {

	ext.buildProps = file "build.properties"

	buildProps.withReader {
		def prop = new Properties()
		prop.load(it)
		ext.config = new ConfigSlurper().parse prop
	}

    repositories {
	    mavenCentral()
	    maven {
			url = "https://plugins.gradle.org/m2/"
		}
	}

    dependencies {
		classpath group: "net.md-5", name: "SpecialSource", version: config.special_source.version
		classpath group: "com.github.jengelman.gradle.plugins", name: "shadow", version: "6.1.0"
    }
}

plugins {
    id "java-library"
    id "eclipse"
    id "com.palantir.launch-config" version "1.2.0"
    id "application"
	id "com.github.johnrengelman.shadow" version "6.1.0"
}

ext {
	minecraft_version = config.minecraft.version

	// Directories
	minecraft_files = file "${buildDir}/minecraft/files"
	minecraft_files_working_directory = file "${buildDir}/minecraft"
	mappings = file "${buildDir}/minecraft/mappings"
	
	minecraft_files.mkdirs()
	minecraft_files_working_directory.mkdirs()
	mappings.mkdirs()
	
	// Files
	minecraft_mappings = file "${minecraft_files}/${minecraft_version}-client.txt"
	minecraft_jar = file "${minecraft_files}/${minecraft_version}-client.jar"
	library_list = file "${minecraft_files}/${minecraft_version}-libraries.txt"
	
	mapping_obf_to_name = file "${mappings}/obf_to_name.tsrg"
	mapping_name_to_obf = file "${mappings}/name_to_obf.tsrg"
	
	mapped_minecraft_jar = file "${minecraft_files}/${minecraft_version}-client-mapped.jar"
}

repositories {
	mavenCentral()
	maven {
		url "https://files.minecraftforge.net/maven"
	}
	maven {
		url "https://repo.u-team.info"
	}
}

configurations {
	headlessMinecraftImplementation {
		transitive = false
	}
	
	packedDependencies {
		transitive = false
	}
	
	implementation.extendsFrom packedDependencies
}

dependencies {
	headlessMinecraftImplementation project(":Headless-Minecraft-Implementation")

	packedDependencies group: "net.hycrafthd", name: "minecraft_downloader", version: config.minecraft_downloader.version
	packedDependencies group: "net.hycrafthd", name: "logging_util", version: config.logging_util.version
	
	packedDependencies group: "org.apache.logging.log4j", name: "log4j-api", version: config.log4j.version
	packedDependencies group: "org.apache.logging.log4j", name: "log4j-core", version: config.log4j.version
	packedDependencies group: "org.apache.logging.log4j", name: "log4j-iostreams", version: config.log4j.version
		
	packedDependencies group: "net.sf.jopt-simple", name: "jopt-simple", version: config.jopt_simple.version
		
	packedDependencies group: "org.spongepowered", name: "mixin", version: config.mixin.version
	
	packedDependencies (group: "cpw.mods", name: "modlauncher", version: config.mod_launcher.version) {
		transitive = false
	}
	packedDependencies (group: "cpw.mods", name: "grossjava9hacks", version: config.gross_java9_hacks.version) {
		transitive = false
	}
		
	packedDependencies group: "com.google.guava", name: "guava", version: config.guava.version
	packedDependencies group: "com.google.code.gson", name: "gson", version: config.gson.version
	
	packedDependencies group: "org.ow2.asm", name: "asm", version: config.asm.version
	packedDependencies group: "org.ow2.asm", name: "asm-commons", version: config.asm.version
	packedDependencies group: "org.ow2.asm", name: "asm-tree", version: config.asm.version
	packedDependencies group: "org.ow2.asm", name: "asm-analysis", version: config.asm.version
	packedDependencies group: "org.ow2.asm", name: "asm-util", version: config.asm.version
}

group = "net.hycrafthd"
archivesBaseName = "headless_minecraft-" + minecraft_version
version = "1.0.0-SNAPSHOT"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
	withSourcesJar()
	withJavadocJar()
}

sourceSets {
    main {
        java
        resources
    }
}

tasks.named("jar") {
	archiveClassifier = ""
	
	dependsOn ":Headless-Minecraft-Implementation:build"
	
	def implementation = configurations.headlessMinecraftImplementation.singleFile
	
	from "LICENSE"
	from implementation
	
	manifest {
		attributes(
			"Implementation-Version": project.version,
			"Implementation-Vendor": "HyCraftHD, Luc_ZZ",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"Headless-Minecraft-Implementation-Jar": implementation.name
		)
	}
}

tasks.named("shadowJar") {
   archiveClassifier.set("application")
   configurations = [project.configurations.packedDependencies]
   
   mergeServiceFiles()
   
   transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}

task runHeadlessMinecraft(type: JavaExec) {
	def run = new File("${rootDir}/run")
	if(!run.exists()) {
		run.mkdirs()
	}

	main "net.hycrafthd.headless_minecraft.launcher.Main"
	args "--run", "\"$run\"", "--auth-file", "auth.json"
	systemProperties = [
		"headless-minecraft.development": "true",
		"headless-minecraft.development.download": "\"$minecraft_files\"",
		"headless-minecraft.development.mapped-minecraft": "\"$mapped_minecraft_jar\"",
		"headless-minecraft.development.implementation-build": "\"" + file(project(":Headless-Minecraft-Implementation").projectDir.toString() + "/bin/main") +"\"",
		"headless-minecraft.development.main-plugin-build": "\"" + file(project(":Main-Plugin").projectDir.toString() + "/bin/main") +"\"",
	]
	workingDir run
}

application {
	mainClassName = "net.hycrafthd.headless_minecraft.launcher.Main"
	applicationName = "Headless Minecraft"
}

launchConfig {
	includedTasks "runHeadlessMinecraft"
}